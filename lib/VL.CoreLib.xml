<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VL.CoreLib</name>
    </assembly>
    <members>
        <member name="T:VL.Lib.Mathematics.Circle">
            <summary>
            A circle with center and radius
            </summary>
        </member>
        <member name="T:VL.Lib.Mathematics.Collision2D">
            <summary>
            
            This class is organized like the <see cref="T:SharpDX.Collision"/> class.
            So that the least complex objects will have the most methods in most cases. 
            Note that not all shapes exist at this time and not all shapes have a corresponding struct. 
            Only the objects that have a corresponding struct should come first in naming and in parameter order.
            The order of complexity is as follows:
                
            1. Point
            2. Circle
            3. Rectangle
            
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.CircleContainsPoint(VL.Lib.Mathematics.Circle@,SharpDX.Vector2@)">
            <summary>
            Checks whether the circle contains the point
            </summary>
            <param name="circle"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.CircleIntersectsCircle(VL.Lib.Mathematics.Circle@,VL.Lib.Mathematics.Circle@)">
            <summary>
            Checks whether the circles intersect
            </summary>
            <param name="circle1"></param>
            <param name="circle2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.CircleContainsCircle(VL.Lib.Mathematics.Circle@,VL.Lib.Mathematics.Circle@)">
            <summary>
            Checks whether Circle 1 contains Circle 2
            </summary>
            <param name="circle1"></param>
            <param name="circle2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.CircleIntersectsRect(VL.Lib.Mathematics.Circle@,SharpDX.RectangleF@)">
            <summary>
            Checks whether the circle and the rect intersect
            </summary>
            <param name="circle"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.RectContainsPoint(SharpDX.RectangleF@,SharpDX.Vector2@,System.Boolean@)">
            <summary>
            Checks whether the rectangle contains the point
            </summary>
            <param name="rectangle"></param>
            <param name="point"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.RectIntersectsRect(SharpDX.RectangleF@,SharpDX.RectangleF@,System.Boolean@)">
            <summary>
            Checks whether the rectangles intersect
            </summary>
            <param name="rectangle1"></param>
            <param name="rectangle2"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Collision2D.RectContainsRect(SharpDX.RectangleF@,SharpDX.RectangleF@,System.Boolean@)">
            <summary>
            Checks whether Rectangle 1 contains Rectangle 2
            </summary>
            <param name="rectangle1"></param>
            <param name="rectangle2"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.Scale(SharpDX.RectangleF@,SharpDX.Vector2@)">
            <summary>
            Scales the rectangle in horizontal and vertical direction
            </summary>
            <param name="input"></param>
            <param name="scaling"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.RectangleNodes.Translate(SharpDX.RectangleF@,SharpDX.Vector2@)">
            <summary>
            Changes the position of the rectangle
            </summary>
            <param name="input"></param>
            <param name="translation"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.VectorNodes.Vector(SharpDX.Vector2@,System.Single@,System.Single@)">
            <summary>
            Splits a vector into its components
            </summary>
            <param name="input"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.VectorNodes.ToVector3(SharpDX.Vector2@,System.Single)">
            <summary>
            Converts to a Vector3 with a specified z
            </summary>
            <param name="input"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.VectorNodes.ToVector4(SharpDX.Vector2@,System.Single,System.Single)">
            <summary>
            Converts to a Vector4 with a specified z and w
            </summary>
            <param name="input"></param>
            <param name="z"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.VectorNodes.GetItem(SharpDX.Vector2@,System.Int32)">
            <summary>
            Gets the specified component of the vector, throws an exception when out of bounds. Use GetSlice if you want to auto wrap the index
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.VectorNodes.SetItem(SharpDX.Vector2@,System.Single,System.Int32,SharpDX.Vector2@)">
            <summary>
            Sets the specified component of the vector, throws an exception when out of bounds. Use SetSlice if you want to auto wrap the index
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.VectorNodes.GetSlice(SharpDX.Vector2@,System.Int32)">
            <summary>
            Gets the specified component of the vector, wraps the index if out of bounds. Use GetItem if you want better performance
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.VectorNodes.SetSlice(SharpDX.Vector2@,System.Single,System.Int32,SharpDX.Vector2@)">
            <summary>
            Sets the specified component of the vector, wraps the index if out of bounds. Use SetItem if you want better performance
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.VectorNodes.Cross(SharpDX.Vector2@,SharpDX.Vector2@)">
            <summary>
            Two dimensional cross product, also called perp dot product 
            </summary>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.VectorNodes.Angle(SharpDX.Vector2@)">
            <summary>
            Calculates the angle between the direction of a 2d vector and the X-Axis in cycles
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.VectorNodes.FromValues(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a vector from the first values of a sequence, if the count of the sequence is lower than the dimension the remainig values get filled with 0
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.AlignedBoxExtensions.CreateCenterSize(SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Creates an AlignedBox from center position and size vector
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.BoxExtensions.CreateCenterSize(SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Creates a Box from center position and size vector. Initially, the Box is axis-aligned box, but it can be rotated and transformed later
            </summary>
            <param name="center"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.BoxExtensions.BoxJoin(SharpDX.Vector3@,SharpDX.Matrix@)">
            <summary>
            Creates a Box from extends (half size for each axis) and transformation
            </summary>
            <param name="extends"></param>
            <param name="transformation"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.BoxExtensions.Scale(SharpDX.OrientedBoundingBox@,SharpDX.Vector3@)">
            <summary>
            Scales the Box by scaling its Extents without affecting the Transformation matrix. By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate
            </summary>
            <param name="input"></param>
            <param name="scaling"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.BoxExtensions.Translate(SharpDX.OrientedBoundingBox@,SharpDX.Vector3@)">
            <summary>
            Translates the Box to a new position using a translation vector
            </summary>
            <param name="input"></param>
            <param name="translation"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.BoxExtensions.Transform(SharpDX.OrientedBoundingBox@,SharpDX.Matrix@)">
            <summary>
            Transforms this Box using a transformation matrix. While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection accuracy
            </summary>
            <param name="input"></param>
            <param name="transformation"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.QuaternionNodes.Quaternion(SharpDX.Quaternion@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Splits a quaternion into its components
            </summary>
            <param name="input"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector4Nodes.Vector(SharpDX.Vector4@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Splits a vector into its components
            </summary>
            <param name="input"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector4Nodes.GetItem(SharpDX.Vector4@,System.Int32)">
            <summary>
            Gets the specified component of the vector, throws an exception when out of bounds. Use GetSlice if you want to auto wrap the index
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector4Nodes.SetItem(SharpDX.Vector4@,System.Single,System.Int32,SharpDX.Vector4@)">
            <summary>
            Sets the specified component of the vector, throws an exception when out of bounds. Use SetSlice if you want to auto wrap the index
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector4Nodes.GetSlice(SharpDX.Vector4@,System.Int32)">
            <summary>
            Gets the specified component of the vector, wraps the index if out of bounds. Use GetItem if you want better performance
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector4Nodes.SetSlice(SharpDX.Vector4@,System.Single,System.Int32,SharpDX.Vector4@)">
            <summary>
            Sets the specified component of the vector, wraps the index if out of bounds. Use SetItem if you want better performance
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector4Nodes.FromValues(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a vector from the first values of a sequence, if the count of the sequence is lower than the dimension the remainig values get filled with 0
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Noise.Random(System.Single,System.Single)">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A random number between 0.0 and 1.0.</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.MatrixNodes.GetValues(SharpDX.Matrix@)">
            <summary>
            Gets the matrix values as a spread of floats
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.MatrixNodes.Transform(SharpDX.Matrix@,SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            Transforms one matrix by another
            </summary>
            <param name="transformation">The first matrix to multiply.</param>
            <param name="input">The second matrix to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:VL.Lib.Mathematics.MatrixNodes.SolvePerspectiveUnitSquare(System.Collections.Generic.IReadOnlyList{SharpDX.Vector2},System.Single)">
            <summary>
            Very fast and direct solution of a 4-point homography, assumes that the original points are (0, 1), (1, 1), (1, 0) and (0, 0)
            </summary>
            <param name="P"></param>
            <param name="zScale"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.Vector(SharpDX.Vector3@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Splits a vector into its components
            </summary>
            <param name="input"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.ToVector4(SharpDX.Vector3@,System.Single)">
            <summary>
            Converts to a Vector4 with a specified w
            </summary>
            <param name="input"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.GetItem(SharpDX.Vector3@,System.Int32)">
            <summary>
            Gets the specified component of the vector, throws an exception when out of bounds. Use GetSlice if you want to auto wrap the index
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.SetItem(SharpDX.Vector3@,System.Single,System.Int32,SharpDX.Vector3@)">
            <summary>
            Sets the specified component of the vector, throws an exception when out of bounds. Use SetSlice if you want to auto wrap the index
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.GetSlice(SharpDX.Vector3@,System.Int32)">
            <summary>
            Gets the specified component of the vector, wraps the index if out of bounds. Use GetItem if you want better performance
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.SetSlice(SharpDX.Vector3@,System.Single,System.Int32,SharpDX.Vector3@)">
            <summary>
            Sets the specified component of the vector, wraps the index if out of bounds. Use SetItem if you want better performance
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.Angle(SharpDX.Vector3@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Calculates yaw and pitch for the direction of a Vector3 in cycles, the lenght is output as well since its calculated in the process anyway
            </summary>
            <param name="input"></param>
            <param name="polar"></param>
            <param name="azimuthal"></param>
            <param name="length"></param>
        </member>
        <member name="M:VL.Lib.Mathematics.Vector3Nodes.FromValues(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a vector from the first values of a sequence, if the count of the sequence is lower than the dimension the remainig values get filled with 0
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.Mathematics.TweenerFloat32">
            <summary>
            Tweener routines, interpolation functions for a value in the range [0..1] in various shapes
            
            Code by west
            </summary>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuadEaseIn(System.Single)">
            <summary>
            QUADRATIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuadEaseOut(System.Single)">
            <summary>
            QUADRATIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuadEaseInOut(System.Single)">
            <summary>
            QUADRATIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuadEaseOutIn(System.Single)">
            <summary>
            QUADRATIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CubicEaseIn(System.Single)">
            <summary>
            CUBIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CubicEaseOut(System.Single)">
            <summary>
            CUBIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CubicEaseInOut(System.Single)">
            <summary>
            CUBIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CubicEaseOutIn(System.Single)">
            <summary>
            CUBIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuarticEaseIn(System.Single)">
            <summary>
            QUARTIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuarticEaseOut(System.Single)">
            <summary>
            QUARTIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuarticEaseInOut(System.Single)">
            <summary>
            QUARTIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuarticEaseOutIn(System.Single)">
            <summary>
            QUARTIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>		
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuinticEaseIn(System.Single)">
            <summary>
            QUINTYIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuinticEaseOut(System.Single)">
            <summary>
            QUINTYIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuinticEaseInOut(System.Single)">
            <summary>
            QUINTYIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.QuinticEaseOutIn(System.Single)">
            <summary>
            QUINTYIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.SinusoidalEaseIn(System.Single)">
            <summary>
            SINUSOIDAL EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.SinusoidalEaseOut(System.Single)">
            <summary>
            SINUSOIDAL EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.SinusoidalEaseInOut(System.Single)">
            <summary>
            SINUSOIDAL EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.SinusoidalEaseOutIn(System.Single)">
            <summary>
            SINUSOIDAL EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ExponentialEaseIn(System.Single)">
            <summary>
            EXPONENTIAL EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ExponentialEaseOut(System.Single)">
            <summary>
            EXPONENTIAL EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ExponentialEaseInOut(System.Single)">
            <summary>
            EXPONENTIAL EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ExponentialEaseOutIn(System.Single)">
            <summary>
            EXPONENTIAL EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CircularEaseIn(System.Single)">
            <summary>
            CIRCULAR EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CircularEaseOut(System.Single)">
            <summary>
            CIRCULAR EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CircularEaseInOut(System.Single)">
            <summary>
            CIRCULAR EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.CircularEaseOutIn(System.Single)">
            <summary>
            CIRCULAR EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>	
            <returns>Shaped value</returns>			
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ElasticEaseIn(System.Single)">
            <summary>
            ELASTIC EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ElasticEaseOut(System.Single)">
            <summary>
            ELASTIC EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ElasticEaseInOut(System.Single)">
            <summary>
            ELASTIC EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.ElasticEaseOutIn(System.Single)">
            <summary>
            ELASTIC EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BackEaseIn(System.Single)">
            <summary>
            BACK EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BackEaseOut(System.Single)">
            <summary>
            BACK EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BackEaseInOut(System.Single)">
            <summary>
            BACK EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BackEaseOutIn(System.Single)">
            <summary>
            BACK EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BounceEaseIn(System.Single)">
            <summary>
            BOUNCE EASE IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BounceEaseOut(System.Single)">
            <summary>
            BOUNCE EASE OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BounceEaseInOut(System.Single)">
            <summary>
            BOUNCE EASE IN/OUT
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Mathematics.TweenerFloat32.BounceEaseOutIn(System.Single)">
            <summary>
            BOUNCE EASE OUT/IN
            </summary>
            <param name="X">Value in the range [0..1]</param>
            <returns>Shaped value</returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.plus``1(``0,``0)">
            <summary>
            Plus operator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.minus``1(``0,``0)">
            <summary>
            Minus operator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.multiply``1(``0,``0)">
            <summary>
            Multiply operator; the inverse operation of division
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.divide``1(``0,``0)">
            <summary>
            Division operator; the inverse operation of multiplication
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.divideInteger``1(``0,``0)">
            <summary>
            Integer division, ie. the fractional part (remainder) is being discarded
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.mod``1(``0,``0)">
            <summary>
            Modulo operator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.zmod``1(``0,``0)">
            <summary>
            Modulo operator with the property, that the remainder of a division z / d is always positive. For example: zmod(-2, 30) = 28.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.onesComplement``1(``0)">
            <summary>
            Bitwise negation for integer types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.orBitwise``1(``0,``0)">
            <summary>
            Bitwise OR for integer types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.andBitwise``1(``0,``0)">
            <summary>
            Bitwise AND for integer types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.xorBitwise``1(``0,``0)">
            <summary>
            Bitwise XOR for integer types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Zero``1(``0@)">
            <summary>
            The zero object for a specific type, the identity element for the addition operation
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.One``1(``0@)">
            <summary>
            The one object for a specific type, the identity element for the multiplication operation
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Quantize``1(``0,``0)">
            <summary>
            Puts the value into a grid with given step size
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="stepSize"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Min``1(``0,``0)">
            <summary>
            Outputs the smaller value of the two inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Max``1(``0,``0)">
            <summary>
            Outputs the greater value of the two inputs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Saturate``1(``0)">
            <summary>
            Clamps the input into 0..1 range
            </summary>
            <typeparam name="F"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps the input into Minimum..Maximum range
            </summary>
            <typeparam name="F"></typeparam>
            <param name="input"></param>
            <param name="Minimum"></param>
            <param name="Maximum"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Simplex``1(``0)">
            <summary>
            Calculates a continuous random function for a given input value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Simplex``1(``0,System.Single)">
            <summary>
            Calculates a continuous random function for a given input value and an animation value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.CatmullRom``2(``0,``0,``0,``0,``1)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="value4"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Adaptive.AdaptiveNodes.Hermite``2(``0,``0,``0,``0,``1)">
            <summary>
            Performs a Hermite spline interpolation
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="value1"></param>
            <param name="tangent1"></param>
            <param name="value2"></param>
            <param name="tangent2"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.Spread.SpreadGenerators.ToSpread``1(``0)">
            <summary>
            Returns the input as a Spread with one element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.Spread.SpreadGenerators.ToSpreadBuilder``1(``0)">
            <summary>
            Returns the input as a SpreadBuilder with one element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.Spread.SpreadGenerators.Cons``1(VL.Lib.Collections.Spread{``0},``0)">
            <summary>
            Returns a spread consisting of its inputs as slices. If the inputs are Spreads, the result will be a Spread&lt;Spread&lt;&gt;&gt;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="spread"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.Spread.SpreadGenerators.LinearSpread(System.Single,System.Single,System.Int32)">
            <summary>
            Creates a spread of values linearly spread across the given interval
            </summary>
            <param name="center"></param>
            <param name="width"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.Spread.SpreadGenerators.RandomSpread(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a spread of random values
            </summary>
            <param name="center"></param>
            <param name="width"></param>
            <param name="seed"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.Spread.SpreadGenerators.Repeat``1(``0,System.Int32)">
            <summary>
            Generates a spread that contains the same value repeated the given number of times
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.Spread.ValuesToVectorsNodes.ValuesToVectors2D(VL.Lib.Collections.SpreadBuilder{SharpDX.Vector2},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Converts a sequence of values to vectors, if the count of the sequence is not divisible by the dimension the remainig value gets omitted
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.Spread.ValuesToVectorsNodes.ValuesToVectors2D(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Converts a sequence of values to vectors, if the count of the sequence is not divisible by the dimension the remainig value gets omitted
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.Spread.ValuesToVectorsNodes.ValuesToVectors3D(VL.Lib.Collections.SpreadBuilder{SharpDX.Vector3},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Converts a sequence of values to vectors, if the count of the sequence is not divisible by the dimension the remainig value gets omitted
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.Spread.ValuesToVectorsNodes.ValuesToVectors3D(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Converts a sequence of values to vectors, if the count of the sequence is not divisible by the dimension the remainig value gets omitted
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.Spread.ValuesToVectorsNodes.ValuesToVectors4D(VL.Lib.Collections.SpreadBuilder{SharpDX.Vector4},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Converts a sequence of values to vectors, if the count of the sequence is not divisible by the dimension the remainig value gets omitted
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.Spread.ValuesToVectorsNodes.ValuesToVectors4D(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Converts a sequence of values to vectors, if the count of the sequence is not divisible by the dimension the remainig value gets omitted
            </summary>
        </member>
        <member name="T:VL.Lib.Collections.EnumerableNodes">
            <summary>
            All the nodes which are safe to use on a sequence. All the other are defined in the VL.DevLib project.
            </summary>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.FirstOrDefault``2(``1,``0,``0@)">
            <summary>
            Returns the first element of a sequence, or the given default value if the sequence contains no elements
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSequence"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.FirstOrDefault``2(``1,``0,System.Func{``0,System.Boolean},``0@)">
            <summary>
            Returns the first element of the sequence that satisfies a condition or the given default value if no such element is found
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSequence"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="predicate"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.LastOrDefault``2(``1,``0,``0@)">
            <summary>
            Returns the last element of a sequence, or the given default value if the sequence contains no elements
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSequence"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.LastOrDefault``2(``1,``0,System.Func{``0,System.Boolean},``0@)">
            <summary>
            Returns the last element of a sequence that satisfies a condition or the given default value if no such element is found
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSequence"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="predicate"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.AND(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Determines whether all elements of a bool sequence are true
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.OR(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Determines whether any elements of a bool sequence is true
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether all elements of a sequence satisfy a condition
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Any``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether any element of a sequence satisfies a condition
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.None``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains no elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether all elements of a sequence do not satisfy a condition
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="input"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.SplitFirst``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEnumerable{``0}@,``0@)">
            <summary>
            Splits the sequence into its first element and the rest
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="output"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Collections.EnumerableNodes.SplitLast``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEnumerable{``0}@,``0@)">
            <summary>
            Splits the sequence into its last element and the rest
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="output"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Add``1(VL.Lib.Collections.Spread{``0},``0)">
            <summary>
            Returns a new spread with the item added at the end
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.AddRange``1(VL.Lib.Collections.Spread{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified items to the end of the spread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Concat``1(VL.Lib.Collections.Spread{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates all incoming spreads to one spread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="spread"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Clear``1(VL.Lib.Collections.Spread{``0})">
            <summary>
            Returns the empty spread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Distinct``1(VL.Lib.Collections.Spread{``0})">
            <summary>
            Returns distinct elements from a spread by using the default equality comparer to compare values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Except``1(VL.Lib.Collections.Spread{``0},VL.Lib.Collections.Spread{``0})">
            <summary>
            Produces the set difference of two spreads by using the default equality comparer to compare values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.GetSlice``1(VL.Lib.Collections.Spread{``0},``0,System.Int32)">
            <summary>
            Returns the slice at the specified index or the given default value in case the spread is empty
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.GetSpread``1(VL.Lib.Collections.Spread{``0},System.Int32,System.Int32)">
            <summary>
            Returns a sub-spread of the spread that is addressed via index and count
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Insert``1(VL.Lib.Collections.Spread{``0},System.Int32,``0)">
            <summary>
            Inserts the item at the specified index. Can throw ArgumentOutOfRangeException exception
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.InsertSlice``1(VL.Lib.Collections.Spread{``0},System.Int32,``0)">
            <summary>
            Inserts a new slice at the specified index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Pairwise``2(VL.Lib.Collections.Spread{``0},System.Func{``0,``0,``1})">
            <summary>
            Applies the selector for each pair in the spread and returns a new spread with one less item
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="input"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Project``2(VL.Lib.Collections.Spread{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a spread to a sequence, and flattens the resulting sequences into one spread
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="input"></param>
            <param name="transformer"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.RemoveAt``1(VL.Lib.Collections.Spread{``0},System.Int32)">
            <summary>
            Removes the item at the specified index. Can throw ArgumentOutOfRangeException exception
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.RemoveSliceAt``1(VL.Lib.Collections.Spread{``0},System.Int32)">
            <summary>
            Removes the slice at the specified index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Resize``1(VL.Lib.Collections.Spread{``0},System.Int32,System.Func{``0})">
            <summary>
            Returns a new spread of the given size using the item factory to create new items
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="size"></param>
            <param name="itemFactory"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Reverse``1(VL.Lib.Collections.Spread{``0})">
            <summary>
            Inverts the order of the elements in a spread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Sort``1(VL.Lib.Collections.Spread{``0})">
            <summary>
            Sorts the elements in the entire spread using the default comparer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Sort``1(VL.Lib.Collections.Spread{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Sorts the elements in the entire spread using the specified comparer function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.OrderBy``2(VL.Lib.Collections.Spread{``0},System.Boolean,System.Func{``0,``1})">
            <summary>
            Sorts the elements in the entire spread according to a key
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="input"></param>
            <param name="descending"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.SetItem``1(VL.Lib.Collections.Spread{``0},System.Int32,``0)">
            <summary>
            Replaces the item at the specified index with the new value. Can throw ArgumentOutOfRangeException exception
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.SetSlice``1(VL.Lib.Collections.Spread{``0},``0,System.Int32)">
            <summary>
            Replaces the slice at the specified index with the new value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="value"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Skip``1(VL.Lib.Collections.Spread{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in the spread and then returns the remaining elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.SkipLast``1(VL.Lib.Collections.Spread{``0},System.Int32)">
            <summary>
            Bypasses a specified number of contiguous elements from the end of the spread and returns the remaining elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.SplitAt``1(VL.Lib.Collections.Spread{``0},System.Int32,VL.Lib.Collections.Spread{``0}@,VL.Lib.Collections.Spread{``0}@)">
            <summary>
            Splits the spread at the given index into two spreads
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="index"></param>
            <param name="output"></param>
            <param name="output2"></param>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.SplitFirst``1(VL.Lib.Collections.Spread{``0},``0,VL.Lib.Collections.Spread{``0}@,``0@)">
            <summary>
            Splits the spread into its first slice and the rest
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="output"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.SplitLast``1(VL.Lib.Collections.Spread{``0},``0,VL.Lib.Collections.Spread{``0}@,``0@)">
            <summary>
            Splits the spread into its last slice and the rest
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="defaultValue"></param>
            <param name="output"></param>
            <param name="result"></param>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Take``1(VL.Lib.Collections.Spread{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of the spread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.TakeLast``1(VL.Lib.Collections.Spread{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end of the spread
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Union``1(VL.Lib.Collections.Spread{``0},VL.Lib.Collections.Spread{``0})">
            <summary>
            Produces the set union of two spreads by using the default equality comparer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.UnZip``1(VL.Lib.Collections.Spread{``0},VL.Lib.Collections.Spread{``0}@,VL.Lib.Collections.Spread{``0}@)">
            <summary>
            The inverse of Zip. Interprets the input sequence as being interleaved and untangles it
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="output"></param>
            <param name="output2"></param>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Where``1(VL.Lib.Collections.Spread{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a spread based on a predicate. Each element's index is used in the logic of the predicate function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Collections.SpreadNodes.Zip``1(VL.Lib.Collections.Spread{``0},VL.Lib.Collections.Spread{``0},System.Boolean)">
            <summary>
            Interleaves the two input spreads
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="input2"></param>
            <param name="useMinCount"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.Join(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Joins a color from its components
            </summary>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.JoinRGBAlpha(SharpDX.Vector3@,System.Single)">
            <summary>
            Joins a color from a Vector3 and alpha
            </summary>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.Split(SharpDX.Color4@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Splits a color into its components
            </summary>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.SetRed(SharpDX.Color4@,System.Single)">
            <summary>
            Overrides the red component of the color
            </summary>
            <param name="input"></param>
            <param name="red"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.SetGreen(SharpDX.Color4@,System.Single)">
            <summary>
            Overrides the green component of the color
            </summary>
            <param name="input"></param>
            <param name="green"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.SetBlue(SharpDX.Color4@,System.Single)">
            <summary>
            Overrides the blue component of the color
            </summary>
            <param name="input"></param>
            <param name="blue"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.SetAlpha(SharpDX.Color4@,System.Single)">
            <summary>
            Overrides the alpha component of the color
            </summary>
            <param name="input"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.Scale(SharpDX.Color4@,SharpDX.Color4@,System.Single)">
            <summary>
            Scales the RGB values, alpha will stay the same
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <param name="scalar"></param>
        </member>
        <member name="M:VL.Lib.Color.ColorNodes.DivScale(SharpDX.Color4@,SharpDX.Color4@,System.Single)">
            <summary>
            Scales the RGB values, alpha will stay the same
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <param name="scalar"></param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.SRGBToRGB(SharpDX.Color4)">
            <summary>
            Converts sRGB color values to RGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="srgb">
            Color value to convert in sRGB.
            </param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.RGBToSRGB(SharpDX.Color4)">
            <summary>
            Converts RGB color values to sRGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="rgb">Color value to convert.</param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.FromHSL(SharpDX.Vector4)">
            <summary>
            Converts HSL color values to RGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="hsl">
            Color value to convert in hue, saturation, lightness (HSL).
            The X element is Hue (H), the Y element is Saturation (S), the Z element is Lightness (L), and the W element is Alpha (which is copied to the output's Alpha value).
            Each has a range of 0.0 to 1.0.
            </param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.ToHSL(SharpDX.Color4)">
            <summary>
            Converts RGB color values to HSL color values.
            </summary>
            <returns>
            Returns the converted color value.
            The X element is Hue (H), the Y element is Saturation (S), the Z element is Lightness (L), and the W element is Alpha (a copy of the input's Alpha value).
            Each has a range of 0.0 to 1.0.
            </returns>
            <param name="rgb">Color value to convert.</param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.FromHSV(SharpDX.Vector4)">
            <summary>
            Converts HSV color values to RGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="hsv">
            Color value to convert in hue, saturation, value (HSV).
            The X element is Hue (H), the Y element is Saturation (S), the Z element is Value (V), and the W element is Alpha (which is copied to the output's Alpha value).
            Each has a range of 0.0 to 1.0.
            </param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.ToHSV(SharpDX.Color4)">
            <summary>
            Converts RGB color values to HSV color values.
            </summary>
            <returns>
            Returns the converted color value.
            The X element is Hue (H), the Y element is Saturation (S), the Z element is Value (V), and the W element is Alpha (a copy of the input's Alpha value).
            Each has a range of 0.0 to 1.0.
            </returns>
            <param name="rgb">Color value to convert.</param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.FromXYZ(SharpDX.Vector4)">
            <summary>
            Converts XYZ color values to RGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="xyz">
            Color value to convert with the trisimulus values of X, Y, and Z in the corresponding element, and the W element with Alpha (which is copied to the output's Alpha value).
            Each has a range of 0.0 to 1.0.
            </param>
            <remarks>Uses the CIE XYZ colorspace.</remarks>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.ToXYZ(SharpDX.Color4)">
            <summary>
            Converts RGB color values to XYZ color values.
            </summary>
            <returns>
            Returns the converted color value with the trisimulus values of X, Y, and Z in the corresponding element, and the W element with Alpha (a copy of the input's Alpha value).
            Each has a range of 0.0 to 1.0.
            </returns>
            <param name="rgb">Color value to convert.</param>
            <remarks>Uses the CIE XYZ colorspace.</remarks>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.FromYUV(SharpDX.Vector4)">
            <summary>
            Converts YCbCr color values to RGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="yuv">
            Color value to convert in Luma-Chrominance (YCbCr) aka YUV.
            The X element contains Luma (Y, 0.0 to 1.0), the Y element contains Blue-difference chroma (U, -0.5 to 0.5), the Z element contains the Red-difference chroma (V, -0.5 to 0.5), and the W element contains the Alpha (which is copied to the output's Alpha value).
            </param>
            <remarks>Converts using ITU-R BT.601/CCIR 601 W(r) = 0.299 W(b) = 0.114 U(max) = 0.436 V(max) = 0.615.</remarks>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.ToYUV(SharpDX.Color4)">
            <summary>
            Converts RGB color values to YUV color values.
            </summary>
            <returns>
            Returns the converted color value in Luma-Chrominance (YCbCr) aka YUV.
            The X element contains Luma (Y, 0.0 to 1.0), the Y element contains Blue-difference chroma (U, -0.5 to 0.5), the Z element contains the Red-difference chroma (V, -0.5 to 0.5), and the W element contains the Alpha (a copy of the input's Alpha value).
            Each has a range of 0.0 to 1.0.
            </returns>
            <param name="rgb">Color value to convert.</param>
            <remarks>Converts using ITU-R BT.601/CCIR 601 W(r) = 0.299 W(b) = 0.114 U(max) = 0.436 V(max) = 0.615.</remarks>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.FromHCY(SharpDX.Vector4)">
            <summary>
            Converts HCY color values to RGB color values.
            </summary>
            <returns>
            Returns the converted color value.
            </returns>
            <param name="hcy">
            Color value to convert in hue, chroma, luminance (HCY).
            The X element is Hue (H), the Y element is Chroma (C), the Z element is luminance (Y), and the W element is Alpha (which is copied to the output's Alpha value).
            Each has a range of 0.0 to 1.0.
            </param>
        </member>
        <member name="M:VL.Lib.ColorMath.ColorConversions.ToHCY(SharpDX.Color4)">
            <summary>
            Converts RGB color values to HCY color values.
            </summary>
            <returns>
            Returns the converted color value.
            The X element is Hue (H), the Y element is Chroma (C), the Z element is luminance (Y), and the W element is Alpha (a copy of the input's Alpha value).
            Each has a range of 0.0 to 1.0.
            </returns>
            <param name="rgb">Color value to convert.</param>
        </member>
        <member name="T:VL.Lib.IO.FolderDialog">
            <summary>
            Opens a folder selection dialog and returns the selected folder
            </summary>
        </member>
        <member name="T:VL.Lib.IO.FileDialogOpen">
            <summary>
            Opens a file selection dialog and returns the selected file(s)
            </summary>
        </member>
        <member name="T:VL.Lib.IO.FileDialogSave">
            <summary>
            Opens a file save dialog and returns the selected file
            </summary>
        </member>
        <member name="T:VL.Lib.IO.FileNoSharing">
            <summary>
            Gets or creates the stream of a file for reading and writing
            </summary>
        </member>
        <member name="T:VL.Lib.IO.Net.NetUtils">
            <summary>
            A couple of utility functions around IP addresses and end points.
            </summary>
        </member>
        <member name="F:VL.Lib.IO.Net.NetUtils.DefaultAddress">
            <summary>
            The default IP address to use for unconnected pins. Points to the 127.0.0.1
            </summary>
        </member>
        <member name="F:VL.Lib.IO.Net.NetUtils.DefaultIPEndPoint">
            <summary>
            The default IP end point to use for unconnected pins. Points to 127.0.0.1 and port 0
            </summary>
        </member>
        <member name="F:VL.Lib.IO.Net.NetUtils.NoIPEndPoint">
            <summary>
            An IP end point which points to nowhere.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Net.NetUtils.GetHostAddresses(System.String)">
            <summary>
            Returns the Internet Protocol (IP) addresses for the specified host
            </summary>
            <param name="hostNameOrAddress"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.Net.NetUtils.GetHostAddressesAsync(System.String)">
            <summary>
            Returns the Internet Protocol (IP) addresses for the specified host asynchronously
            </summary>
            <param name="hostNameOrAddress"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.Net.NetUtils.GetIPEndPoint(System.String,System.Int32)">
            <summary>
            Returns the IP end point for the specified host and port
            </summary>
            <param name="hostNameOrAddress"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.Net.NetUtils.GetIPEndPointAsync(System.String,System.Int32)">
            <summary>
            Returns the IP end point for the specified host and port asynchronously
            </summary>
            <param name="hostNameOrAddress"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="P:VL.Lib.IO.Mouse.PressedButtons">
            <summary>
            The currently pressed mouse buttons.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.ToPath(System.String)">
            <summary>
            Converts the string to a Path
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.ToPathExplicit(System.String,System.Boolean)">
            <summary>
            Converts the string to a Path, explicitly decide if file or folder
            </summary>
            <param name="input"></param>
            <param name="isDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.Filename(System.String,System.String,System.String)">
            <summary>
            Creates a Path from directory, file and extension strings
            </summary>
            <param name="directory"></param>
            <param name="filename"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.MakePathHack(VL.Lib.IO.Path,System.String)">
            <summary>
            Combines strings to a path
            </summary>
            <param name="path"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.MakePath(VL.Lib.IO.Path,System.String)">
            <summary>
            Combines strings to a path
            </summary>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.IsRooted(VL.Lib.IO.Path)">
            <summary>
            Checks if a path is absolute or relative
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.MakeRelative(VL.Lib.IO.Path,VL.Lib.IO.Path)">
            <summary>
            Converts an absolute path to a relative one (to the given base)
            </summary>
            <param name="absolutePath"></param>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.Normalize(VL.Lib.IO.Path)">
            <summary>
            Normalizes the specified path, aka canonicalization.
            e.g. converts c:\aaa\bbb\..\ccc to c:\aaa\ccc
            This operation is rather slow.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.SystemFolder(VL.Lib.IO.SpecialFolder)">
            <summary>
            Returns various folders of the system
            </summary>
            <param name="specialFolder"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.CreateDirectory(VL.Lib.IO.Path,System.Boolean,System.Boolean@)">
            <summary>
            Creates the folder of the path
            </summary>
            <param name="input"></param>
            <param name="create"></param>
            <param name="success"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.Move(VL.Lib.IO.Path,VL.Lib.IO.Path,System.Boolean)">
            <summary>
            Moves the file or folder to a new location
            </summary>
            <param name="input"></param>
            <param name="newPath"></param>
            <param name="replaceExisting"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.Rename(VL.Lib.IO.Path,System.String,System.Boolean)">
            <summary>
            Renames the file or folder
            </summary>
            <param name="input"></param>
            <param name="newName"></param>
            <param name="replaceExisting"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.Copy(VL.Lib.IO.Path,VL.Lib.IO.Path,System.Boolean,VL.Lib.IO.Path@)">
            <summary>
            Copies the file or folder to a new location
            </summary>
            <param name="input"></param>
            <param name="newPath"></param>
            <param name="replaceExisting"></param>
            <param name="copy"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.PathExtension.Delete(VL.Lib.IO.Path,System.Boolean,System.Boolean@)">
            <summary>
            Deletes the file or folder
            </summary>
            <param name="input"></param>
            <param name="do"></param>
            <param name="success"></param>
        </member>
        <member name="T:VL.Lib.IO.Ports.SerialPort">
            <summary>
            Manages a serialport provider.
            </summary>
        </member>
        <member name="P:VL.Lib.IO.Ports.SerialPort.IsOpen">
            <summary>
            Whether or not the serialport is connected.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Ports.SerialPort.Update(VL.Lib.IO.Ports.ComPort,System.Int32,System.Int32,System.IO.Ports.StopBits,System.IO.Ports.Parity,System.IO.Ports.Handshake,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Configures the internally managed serialport provider.
            </summary>
            <returns>A serialport provider which can be used by multiple threads in parallel.</returns>
        </member>
        <member name="T:VL.Lib.IO.Ports.Receiver">
            <summary>
            Receives bytes from a SerialPort.
            </summary>
        </member>
        <member name="P:VL.Lib.IO.Ports.Receiver.Data">
            <summary>
            The observable sequence of bytes. The bytes will be pushed on the network thread.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Ports.Receiver.Update(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Ports.SerialPort})">
            <summary>
            Configures the receiver.
            </summary>
            <param name="port">The serialport to receive data from.</param>
        </member>
        <member name="T:VL.Lib.IO.Ports.Sender">
            <summary>
            Sends bytes on a SerialPort.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Ports.Sender.Update(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Ports.SerialPort},System.IObservable{VL.Lib.Collections.Spread{System.Byte}})">
            <summary>
            Configures the sender.
            </summary>
            <param name="port">The serialport to send data to.</param>
            <param name="data">The bytes to send.</param>
        </member>
        <member name="T:VL.Lib.IO.Socket.Datagram">
            <summary>
            A datagram is a little message used in connection less network protocols (like UDP). 
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Socket.Datagram.#ctor(System.Net.IPEndPoint,VL.Lib.Collections.Spread{System.Byte})">
            <summary>
            Creates a datagram.
            </summary>
            <param name="remoteEndPoint">The remote end point.</param>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:VL.Lib.IO.Socket.Datagram.Split(System.Net.IPEndPoint@,VL.Lib.Collections.Spread{System.Byte}@)">
            <summary>
            Splits the datagram into its remote end point and payload.
            </summary>
            <param name="remoteEndPoint">The remote end point from which this datagram was received or will be sent to. Returns none if it's the default value.</param>
            <param name="payload">The payload of the datagram. Returns the empty spread if it's the default value.</param>
        </member>
        <member name="P:VL.Lib.IO.Socket.Datagram.RemoteEndPoint">
            <summary>
            The remote end point this datagram shall be sent to or was received from.
            </summary>
        </member>
        <member name="P:VL.Lib.IO.Socket.Datagram.Payload">
            <summary>
            The content of this datagram.
            </summary>
        </member>
        <member name="T:VL.Lib.IO.Socket.DatagramReceiver">
            <summary>
            Receives datagrams from a local socket.
            </summary>
        </member>
        <member name="P:VL.Lib.IO.Socket.DatagramReceiver.Datagrams">
            <summary>
            The observable sequence of datagrams. The datagrams will be pushed on the network thread.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Socket.DatagramReceiver.Update(VL.Lib.Basics.Resources.IResourceProvider{System.Net.Sockets.Socket})">
            <summary>
            Configures the receiver.
            </summary>
            <param name="localSocket">The local socket to receive data from.</param>
        </member>
        <member name="T:VL.Lib.IO.Socket.DatagramSender">
            <summary>
            Sends datagrams on a local socket.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Socket.DatagramSender.Update(VL.Lib.Basics.Resources.IResourceProvider{System.Net.Sockets.Socket},System.IObservable{VL.Lib.IO.Socket.Datagram})">
            <summary>
            Configures the sender.
            </summary>
            <param name="localSocket">The local socket to send data out of.</param>
            <param name="datagrams">The datagrams to send.</param>
        </member>
        <member name="T:VL.Lib.IO.Socket.UDPSocket">
            <summary>
            Manages a UDP socket provider.
            </summary>
        </member>
        <member name="P:VL.Lib.IO.Socket.UDPSocket.IsOpen">
            <summary>
            Whether or not the socket is open.
            </summary>
        </member>
        <member name="P:VL.Lib.IO.Socket.UDPSocket.Enabled">
            <summary>
            Gets or sets whether the socket is active.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.Socket.UDPSocket.Update(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Configures the internally managed socket provider.
            </summary>
            <param name="localEndPoint">The local end point to use.</param>
            <param name="bind">Whether or not to bind the socket.</param>
            <returns>A socket provider which can be used by multiple threads in parallel.</returns>
        </member>
        <member name="T:VL.Lib.IO.IProjectionSpace">
            <summary>
            Implement this interface on your gui plugin if this has a notion of a projection space.
            You can use the aspect ratio of your window or viewport to do the math or have an explicit aspect ratio transform input.
            </summary>
        </member>
        <member name="M:VL.Lib.IO.IProjectionSpace.MapFromPixels(VL.Lib.IO.Notifications.INotificationWithPosition,SharpDX.Vector2@,SharpDX.Vector2@)">
            <summary>
            Transforms a position in pixels into 
            * a position in normalized projection space ((bottom, left = -1, -1) .. (top, right = 1, 1)) 
            * a position in projection space (typically one that respects the aspect ratio of the window)
            so you might need to "undo" the last 2 or 3 transformations in that chain:
                        World T.          View T.          Proj T.          AspectR. T.           Crop T.        Viewport Placement
            Object Space  -->  World Space  -->  View Space  -->  PROJ SPACE  -->  NORM PROJ SPACE  -->  Viewport Space  -->  Pixel Space
            </summary>
        </member>
        <member name="M:VL.Lib.IO.RenamedEventArgsUtils.NewPath(System.IO.RenamedEventArgs)">
            <summary>
            Returns the new path of a rename reported by watcher
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.RenamedEventArgsUtils.OldPath(System.IO.RenamedEventArgs)">
            <summary>
            Returns the old path of a rename reported by watcher
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.IO.Watcher">
            <summary>
            Monitors a folder and its files for creation, change, deletion and renaming
            </summary>
        </member>
        <member name="T:VL.Lib.IO.ReaderString">
            <summary>
            Asynchronously reads string from an entire stream
            </summary>
        </member>
        <member name="T:VL.Lib.IO.WriterBytes">
            <summary>
            Asynchronously writes bytes to a stream
            </summary>
        </member>
        <member name="T:VL.Lib.IO.WriterString">
            <summary>
            Asynchronously writes strings to a stream
            </summary>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.Length(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},System.Int64@)">
            <summary>
            Gets the byte length of the stream
            </summary>
            <param name="streamProvider"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.GetPosition(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},System.Int64@)">
            <summary>
            Gets the current position in the stream
            </summary>
            <param name="input"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.ReadBytes(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},System.Int64,System.Int64,VL.Lib.Collections.Spread{System.Byte}@)">
            <summary>
            Reads bytes from a stream
            </summary>
            <param name="input"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.ReadAllBytes(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},VL.Lib.Collections.Spread{System.Byte}@)">
            <summary>
            Reads all bytes from a stream
            </summary>
            <param name="input"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.ReadString(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},VL.Lib.Text.Encodings,System.Int64,System.Int64,System.String@)">
            <summary>
            Reads strings from a stream
            </summary>
            <param name="input"></param>
            <param name="encoding"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.ReadAllString(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},VL.Lib.Text.Encodings,System.String@)">
            <summary>
            Reads the string from an entire stream
            </summary>
            <param name="input"></param>
            <param name="encoding"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.WriteBytes(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},System.Collections.Generic.IEnumerable{System.Byte},System.Int64)">
            <summary>
            Writes bytes to a stream
            </summary>
            <param name="input"></param>
            <param name="data"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.IO.StreamUtils.WriteString(VL.Lib.Basics.Resources.IResourceProvider{System.IO.Stream},System.String,VL.Lib.Text.Encodings,System.Int64)">
            <summary>
            Writes a string to a stream
            </summary>
            <param name="input"></param>
            <param name="data"></param>
            <param name="encoding"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.IO.File">
            <summary>
            Gets or creates the stream of a file for reading and writing
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceAsyncHelpers.UsingAsync``2(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Fetch a resource, use it, let it get disposed of when the Task is done.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceAsyncHelpers.ToObservable``2(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Fetches a resource and fires a result when the worker task is done. 
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceAsyncHelpers.InBackground``2(System.IObservable{VL.Lib.Basics.Resources.IResourceProvider{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Perform an action when a new resource provider gets pushed. The action is performed on the task pool.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceAsyncHelpers.InBackground``2(System.IObservable{VL.Lib.Basics.Resources.IResourceProvider{``0}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
            <summary>
            Perform an action when a new resource provider gets pushed. The action is performed on the task pool. Check the Cancelation token in your worker to stop work if cancelation was requested.
            </summary>        
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceAsyncHelpers.GetHandleAsync``1(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Threading.CancellationToken)">
            <summary>
            Retrieves the handle asnychronously.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceAsyncHelpers.GetHandleAsync``1(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Threading.CancellationToken,System.Int32)">
            <summary>
            Retrieves the handle asnychronously.
            </summary>
        </member>
        <member name="T:VL.Lib.Basics.Resources.IResourceProvider`1">
            <summary>
            Provides an IResourceHandle, which provides access to a Disposable resource.
            Consumers need to dispose these Handles.
            Implementations provide mechanisms for distributing and sharing Disposable resources.
            </summary>
        </member>
        <member name="T:VL.Lib.Basics.Resources.IResourceHandle`1">
            <summary>
            Is returned by IResourceProvider.GetHandle().
            Provides access to a Disposable Resource.
            </summary>
        </member>
        <member name="T:VL.Lib.Basics.Resources.IConnectableResourceProvider`1">
            <summary>
            A connectable resource provider only works after calling Connect. 
            Disconnect via the disposable returned by Connect(). Only then the upstream handle gets disposed of.
            Used to share Resources more efficiently while connected.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.New``1(System.Func{``0})">
            <summary>
            Manages the lifetime of a resource.
            Every consumer will get its own handle asking the factory for a new resource.
            Disposing a handle will dispose the handle's resource.
            difference to proto: GetHandle() is not lazy, but will create the resource.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.NewPooled``2(``0,System.Func{``0,``1},System.Int32)">
            <summary>
            Manages the lifetime of a resource from a pool. Same key will return a handle to the exact same resource.
            First registered factory method wins, but will be removed on disposal of the pooled resource.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="T">Type of the resource</typeparam>
            <param name="key">The key for the pool and resource creation</param>
            <param name="factory">Factory method to create the resource from the key</param>
            <param name="delayDisposalInMilliseconds">The disposal delay in milliseconds after the last consumer has released its resource handle</param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.New``1(System.Func{``0},System.Action{``0})">
            <summary>
            Manages the lifetime of a resource.
            Every consumer will get its own handle asking the factory for a new resource.
            Disposing a handle will dispose the handle's resource.
            difference to proto: GetHandle() is not lazy, but will create the resource.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Return``1(``0)">
            <summary>
            Will always provide same single resource. It exists already. 
            So its not the responsibility of Return() to dispose it.
            
            Could also imagine a ReturnLazy that takes a Func&lt;TResource&gt;, 
            but as it is used mostly inside the monade it is already lazy to GetHandle() from downstream
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Bind``2(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Func{``0,VL.Lib.Basics.Resources.IResourceProvider{``1}})">
            <summary>
            SelectMany
            Create a ResourceProvider per source resource. Creating any provider will work.
            Takes into account that the resulting resources may depend on the source resources.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Bind``2(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Func{``0,``1})">
            <summary>
            Provides a resource for every sink, asking for a source resource every time a sink resource is demanded. No resources are shared hereby.
            The user provided resource will not get managed as it may exist already. (Select(form => form.Controls[0]) should not dispose the control)
            If you create a new resource that you want to get managed use BindNew for this.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.BindNew``2(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Func{``0,``1})">
            <summary>
            Provides a new resource for every sink, asking for a source resource every time a sink resource is demanded. No resources are shared hereby.
            The user provided resource will get managed.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Do``1(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Action{``0})">
            <summary>
            Applies an action on a resource and outputs the same resource again.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Where``1(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Func{``0,System.Boolean})">
            <summary>
            Just doesn't let you access a resource that doesn't match your needs. Gives you null instead.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Publish``1(VL.Lib.Basics.Resources.IResourceProvider{``0})">
            <summary>
            Lets you connect and disconnect manually to the source.
            All provided handles will now get access to the same upstream resource. 
            You may disconnect and reconnect to provide access to a new upstream resource.
            Former disposable provider Memoize
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Publish``1(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Action{``0})">
            <summary>
            Lets you connect and disconnect manually to the source.
            All provided handles will now get access to the same upstream resource. 
            You may disconnect and reconnect to provide access to a new upstream resource.
            Former disposable provider Memoize
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.PublishPooled``1(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Action{``0})">
            <summary>
            Lets you connect and disconnect manually to the source.
            Manages a pool of handles from the upstream provider.
            On GetHandle, this will return a Handle containing a resource that is not currently in use.
            Manages a pool of upstream handles. When a downstream handle gets disposed, it's inner upstream Handle will be put back into the pool.
            
            Will dispose every upstream handle still in the pool on disconnect.
            Former disposable provider Pool
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.RefCount``1(VL.Lib.Basics.Resources.IConnectableResourceProvider{``0},System.Int32)">
            <summary>
            Connects to upstream IConnectableResourceProvider when first handle is requested
            Will maintain connection until no handle is active any more
            After delayDisposalInMilliseconds, will disconnect from upstream IConnectableResourceProvider
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.RefCount``2(VL.Lib.Basics.Resources.IConnectableResourceProvider{``0},System.IObservable{``1})">
            <summary>
            Connects to upstream IConnectableResourceProvider when first handle is requested
            Will maintain connection until no handle is active any more
            After disposalTriggerSource fired, will disconnect from upstream IConnectableResourceProvider
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Serialize``1(VL.Lib.Basics.Resources.IResourceProvider{``0})">
            <summary>
            Handles get handed out in a serial fashion. Only one handle is in circulation at a given point in time.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.ShareInParallel``1(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Int32)">
            <summary>
            Share a resource that may be accessed in parallel. 
            Make sure that the resource is not mutating while access is granted.
            You may specify how long the resource stays valid after the RefCount goes to zero.
            </summary> 
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.ShareInParallel``2(VL.Lib.Basics.Resources.IResourceProvider{``0},System.IObservable{``1})">
            <summary>
            Share a resource that may be accessed in parallel. 
            Make sure that the resource is not mutating while access is granted.
            You may specify an trigger source which signals the disposal after the RefCount goes to zero.
            </summary> 
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.ShareSerially``1(VL.Lib.Basics.Resources.IResourceProvider{``0})">
            <summary>
            Share a resource that may be accessed in a serial fashion only. 
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.ShareSerially``1(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Int32,System.Action{``0})">
            <summary>
            Share a resource that may be accessed in a serial fashion only. 
            You may specify how long the resource stays valid. 
            Make sure you reset the resource in a way that it feels like a fresh resource.
            It only gets called when a resource gets actually reused.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.ShareSerially``2(VL.Lib.Basics.Resources.IResourceProvider{``0},System.IObservable{``1},System.Action{``0})">
            <summary>
            Share a resource that may be accessed in a serial fashion only. 
            You may specify an trigger source which signals the disposal after the RefCount goes to zero.
            Make sure you reset the resource in a way that it feels like a fresh resource.
            It only gets called when a resource gets actually reused.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.SharePooled``1(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Int32,System.Action{``0})">
            <summary>
            Share resources that may be accessed in a serial fashion only.
            Manages a pool of resources, will provide either a resource from the pool or a new one if the pool is empty.
            You may specify how long the resources in the pool stay valid after the RefCount goes to zero.
            Make sure you reset the resource in a way that it feels like a fresh resource.
            Note that even a delayDisposalInMilliseconds of 0 might lead to a reuse of a resource if several threads are accessing the pool.
            This is why you should always provide a valid reset method. It only gets called when a resource gets actually reused.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.SharePooled``2(VL.Lib.Basics.Resources.IResourceProvider{``0},System.IObservable{``1},System.Action{``0})">
            <summary>
            Share resources that may be accessed in a serial fashion only.
            Manages a pool of resources, will provide either a resource from the pool or a new one if the pool is empty.
            You may specify an trigger source which signals the disposal after the RefCount goes to zero.
            Make sure you reset the resource in a way that it feels like a fresh resource.
            Note that even a delayDisposalInMilliseconds of 0 might lead to a reuse of a resource if several threads are accessing the pool.
            This is why you should always provide a valid reset method. It only gets called when a resource gets actually reused.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Using``1(VL.Lib.Basics.Resources.IResourceProvider{``0})">
            <summary>
            Cata
            Empty using statement
            Only use for sideeffects of the upstream ResourceProvider Monad
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Using``1(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Action{``0})">
            <summary>
            Cata
            Runs the action on the resource
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Using``2(VL.Lib.Basics.Resources.IResourceProvider{``0},System.Func{``0,``1})">
            <summary>
            Cata
            Runs the extractor on the resource and returns the output.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Bind``3(VL.Lib.Basics.Resources.IResourceProvider{``0},VL.Lib.Basics.Resources.IResourceProvider{``1},System.Func{``0,``1,``2})">
            <summary>
            Return a resource using two source resources.
            Does not take ownership of resource in the resulting provider.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Bind``4(VL.Lib.Basics.Resources.IResourceProvider{``0},VL.Lib.Basics.Resources.IResourceProvider{``1},VL.Lib.Basics.Resources.IResourceProvider{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Return a resource using three source resources.
            Does not take ownership of resource in the resulting provider.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.Bind``5(VL.Lib.Basics.Resources.IResourceProvider{``0},VL.Lib.Basics.Resources.IResourceProvider{``1},VL.Lib.Basics.Resources.IResourceProvider{``2},VL.Lib.Basics.Resources.IResourceProvider{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Return a resource using four source resources.
            Does not take ownership of resource in the resulting provider.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.BindNew``4(VL.Lib.Basics.Resources.IResourceProvider{``0},VL.Lib.Basics.Resources.IResourceProvider{``1},VL.Lib.Basics.Resources.IResourceProvider{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Create a new resource using three source resources.
            Takes ownership of the new resource in the resulting provider.
            </summary>
        </member>
        <member name="M:VL.Lib.Basics.Resources.ResourceProvider.BindNew``5(VL.Lib.Basics.Resources.IResourceProvider{``0},VL.Lib.Basics.Resources.IResourceProvider{``1},VL.Lib.Basics.Resources.IResourceProvider{``2},VL.Lib.Basics.Resources.IResourceProvider{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Create a new resource using four source resources.
            Takes ownership of the new resource in the resulting provider.
            </summary>
        </member>
        <member name="T:VL.Lib.Basics.Resources.Handle`1">
            <summary>
            Generic implementation that can be used for any on the fly implementation. 
            Helps with correct implementation of IDispoable.
            </summary>
        </member>
        <member name="T:VL.Lib.Basics.Resources.Provider`1">
            <summary>
            Generic implementation that can be used for any on the fly implementation.
            </summary>
        </member>
        <member name="T:VL.Lib.Basics.Resources.ConnectableProvider`1">
            <summary>
            Generic implementation that can be used for any on the fly implementation. 
            Helps with correct implementation of IDispoable returned by Connect().
            </summary>
        </member>
        <member name="T:VL.Lib.Basics.Resources.GetLatestResourceForTemporaryUse`1">
            <summary>
            Takes a resourceprovider and outputs its resource
            Makes sure to call GetHandle before releasing the old handle.
            </summary>
        </member>
        <member name="T:VL.Lib.Primitive.AbstractLoopRegion">
            <summary>
            Abstract base class for our loop regions.
            </summary>
        </member>
        <member name="T:VL.Lib.Primitive.RepeatLoopRegion">
            <summary>
            Our repeat region.
            </summary>
        </member>
        <member name="T:VL.Lib.Primitive.ForeachLoopRegion">
            <summary>
            Our foreach region.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.Float64Extensions.ZMOD(System.Double,System.Double)">
            <summary>
            Modulo operator with the property, that the remainder of a division z / d
            and z &lt; 0 is positive. For example: zmod(-2, 30) = 28.
            </summary>
            <param name="z"></param>
            <param name="input2"></param>
            <returns>Remainder of division z / d.</returns>
        </member>
        <member name="M:VL.Lib.Primitive.Float64Extensions.CatmullRom(System.Double,System.Double,System.Double,System.Double,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="T:VL.Lib.Primitive.DoubleConverter">
            <summary>
            A class to allow the conversion of doubles to string representations of
            their exact decimal values. The implementation aims for readability over
            efficiency.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.DoubleConverter.ToExactString(System.Double)">
            <summary>
            Converts the given double to a string representation of its
            exact decimal value.
            </summary>
            <param name="input">The double to convert.</param>
            <returns>A string representation of the double's exact decimal value.</returns>
        </member>
        <member name="T:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal">
            <summary>
            Private class used for manipulating
            </summary>
        </member>
        <member name="F:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.digits">
            <summary>
            Digits in the decimal expansion, one byte per digit
            </summary>
        </member>
        <member name="F:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.decimalPoint">
            <summary> 
            How many digits are *after* the decimal point
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.DoubleConverter.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.Integer64Extensions.Inc(System.Int64)">
            <summary>
            Increments the input by 1
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Integer64Extensions.Dec(System.Int64)">
            <summary>
            Decrements the input by 1
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Integer64Extensions.ZMOD(System.Int64,System.Int64)">
            <summary>
            Modulo operator with the property, that the remainder of a division z / d
            and z &lt; 0 is positive. For example: zmod(-2, 30) = 28.
            </summary>
            <param name="z"></param>
            <param name="input2"></param>
            <returns>Remainder of division z / d.</returns>
        </member>
        <member name="M:VL.Lib.Primitive.Integer32Extensions.Inc(System.Int32)">
            <summary>
            Increments the input by 1
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Integer32Extensions.Dec(System.Int32)">
            <summary>
            Decrements the input by 1
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Integer32Extensions.ZMOD(System.Int32,System.Int32)">
            <summary>
            Modulo operator with the property, that the remainder of a division z / d
            and z &lt; 0 is positive. For example: zmod(-2, 30) = 28.
            </summary>
            <param name="z"></param>
            <param name="input2"></param>
            <returns>Remainder of division z / d.</returns>
        </member>
        <member name="M:VL.Lib.Primitive.Float32Extensions.ZMOD(System.Single,System.Single)">
            <summary>
            Modulo operator with the property, that the remainder of a division z / d
            and z &lt; 0 is positive. For example: zmod(-2, 30) = 28.
            </summary>
            <param name="z"></param>
            <param name="input2"></param>
            <returns>Remainder of division z / d.</returns>
        </member>
        <member name="M:VL.Lib.Primitive.Float32Extensions.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:VL.Lib.Primitive.ByteNodes.TryParseHex(System.String,System.Byte@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.ByteNodes.TryParseHex(System.String,System.SByte@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="T:VL.Lib.Primitive.IntegerConversions">
            <summary>
            Convertions between number types.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.SByte)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.SByte)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.SByte)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.SByte)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.SByte)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.SByte)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.SByte)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.SByte)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.SByte)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.SByte)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.SByte)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Byte)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Byte)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Byte)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Byte)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Byte)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Byte)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Byte)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Byte)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Byte)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Byte)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Byte)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Char)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Char)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Char)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Char)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Char)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Char)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Char)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Char)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Char)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Char)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Char)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Int16)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Int16)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Int16)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Int16)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Int16)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Int16)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Int16)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Int16)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Int16)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Int16)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Int16)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.UInt16)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.UInt16)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.UInt16)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.UInt16)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Int32)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Int32)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Int32)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Int32)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Int32)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Int32)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Int32)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Int32)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Int32)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Int32)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Int32)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.UInt32)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.UInt32)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.UInt32)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.UInt32)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Int64)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Int64)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Int64)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Int64)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Int64)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Int64)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Int64)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Int64)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Int64)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Int64)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Int64)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.UInt64)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.UInt64)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.UInt64)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.UInt64)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Single)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Single)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Single)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Single)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Single)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Single)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Single)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Single)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Single)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Single)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Single)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt8(System.Double)">
            <summary>
            Unchecked bitwise copy to Integer8.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToByte(System.Double)">
            <summary>
            Unchecked bitwise copy to Byte.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToChar(System.Double)">
            <summary>
            Unchecked bitwise copy to Char.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt16(System.Double)">
            <summary>
            Unchecked bitwise copy to Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt16(System.Double)">
            <summary>
            Unchecked bitwise copy to unsigned Integer16.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt32(System.Double)">
            <summary>
            Unchecked bitwise copy to Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt32(System.Double)">
            <summary>
            Unchecked bitwise copy to unsigned Integer32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToInt64(System.Double)">
            <summary>
            Unchecked bitwise copy to Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToUInt64(System.Double)">
            <summary>
            Unchecked bitwise copy to unsigned Integer64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat32(System.Double)">
            <summary>
            Unchecked bitwise copy to Float32.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.BitsToFloat64(System.Double)">
            <summary>
            Unchecked bitwise copy to Float64.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8``1(``0)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte``1(``0)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar``1(``0)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16``1(``0)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16``1(``0)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32``1(``0)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32``1(``0)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64``1(``0)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64``1(``0)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32``1(``0)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64``1(``0)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Boolean)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Boolean)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Boolean)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Boolean)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Boolean)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Boolean)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Boolean)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Boolean)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Boolean)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Boolean)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Boolean)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.SByte)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.SByte)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.SByte)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.SByte)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.SByte)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.SByte)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.SByte)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.SByte)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.SByte)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.SByte)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.SByte)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Byte)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Byte)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Byte)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Byte)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Byte)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Byte)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Byte)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Byte)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Byte)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Byte)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Byte)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Char)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Char)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Char)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Char)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Char)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Char)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Char)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Char)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Char)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Char)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Char)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Int16)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Int16)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Int16)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Int16)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Int16)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Int16)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Int16)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Int16)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Int16)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Int16)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Int16)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.UInt16)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.UInt16)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.UInt16)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.UInt16)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.UInt16)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.UInt16)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.UInt16)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.UInt16)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.UInt16)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.UInt16)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.UInt16)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Int32)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Int32)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Int32)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Int32)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Int32)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Int32)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Int32)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Int32)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Int32)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Int32)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Int32)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.UInt32)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.UInt32)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.UInt32)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.UInt32)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.UInt32)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.UInt32)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.UInt32)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.UInt32)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.UInt32)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.UInt32)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.UInt32)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Int64)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Int64)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Int64)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Int64)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Int64)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Int64)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Int64)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Int64)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Int64)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Int64)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Int64)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.UInt64)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.UInt64)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.UInt64)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.UInt64)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.UInt64)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.UInt64)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.UInt64)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.UInt64)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.UInt64)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.UInt64)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.UInt64)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Single)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Single)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Single)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Single)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Single)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Single)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Single)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Single)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Single)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Single)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Single)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt8(System.Double)">
            <summary>
            Range checked value conversion to Integer8. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToByte(System.Double)">
            <summary>
            Range checked value conversion to Byte. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToChar(System.Double)">
            <summary>
            Range checked value conversion to Char. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt16(System.Double)">
            <summary>
            Range checked value conversion to Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt16(System.Double)">
            <summary>
            Range checked value conversion to unsigned Integer16. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt32(System.Double)">
            <summary>
            Range checked value conversion to Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt32(System.Double)">
            <summary>
            Range checked value conversion to unsigned Integer32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToInt64(System.Double)">
            <summary>
            Range checked value conversion to Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToUInt64(System.Double)">
            <summary>
            Range checked value conversion to unsigned Integer64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat32(System.Double)">
            <summary>
            Range checked value conversion to Float32. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToFloat64(System.Double)">
            <summary>
            Range checked value conversion to Float64. 
            Throws an overflow exception if the value does not fit into the target type.
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.Char,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.Int16,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>		
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.UInt16,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>		
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.Int32,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>		
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.UInt32,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>		
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.Int64,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>		
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToHexString(System.UInt64,System.Boolean)">
            <summary>
            Gets the hex representation as a string
            </summary>		
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.Char@)">
            <summary>
            Parses a hex string to a char
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.Int16@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.UInt16@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.Int32@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.UInt32@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.Int64@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseHex(System.String,System.UInt64@)">
            <summary>
            Parses a hex string to an integer
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.Byte,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.Int16,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.Int32,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.Int64,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.SByte,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.Char,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.UInt16,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.UInt32,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.ToString(System.UInt64,System.Boolean)">
            <summary>
            Gets a binary representation as a string
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.Char@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.SByte@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.Byte@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.Int16@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.UInt16@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.Int32@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.UInt32@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.Int64@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.IntegerConversions.TryParseBin(System.String,System.UInt64@)">
            <summary>
            Parses a binary string to an integer, note that leading '0x' is not allowed
            </summary>
        </member>
        <member name="M:VL.Lib.Primitive.TypeHelpers.TypeHelpers.IsInteger``1(``0)">
            <summary>
            Checks whether the input is an integer type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.IsAssigned(System.Object,System.Boolean@,System.Boolean@)">
            <summary>
            Whether or not the value is null
            </summary>
            <param name="x"></param>
            <param name="result"></param>
            <param name="notAssigned"></param>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.NullCoalescing``1(``0,``0)">
            <summary>
            The ?? operator is called the null-coalescing operator. It returns the left-hand operand if the operand is not null; otherwise it returns the right hand operand
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.HardCast``1(System.Object)">
            <summary>
            Casts the input value to the downstream connected type. Will throw a InvalidCastException if the cast fails
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.CastAs``1(System.Object,``0,``0@,System.Boolean@)">
            <summary>
            Casts the input value to the downstream connected type. In case the cast fails the provided default value will be used and the success output will return false
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="default"></param>
            <param name="result"></param>
            <param name="success"></param>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.Identity``1(``0)">
            <summary>
            Returns the input value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.Eq(System.Object,System.Object)">
            <summary>
            Calls the virtual Equals method on the input value
            </summary>
            <param name="input"></param>
            <param name="input2"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.Object.ObjectHelpers.ToString(System.Object)">
            <summary>
            Calls the virtual ToString method on the input value
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.StringExtensions.SurroundWith(System.String,System.String)">
            <summary>
            Adds the given quote string at the beginning and end of the string
            </summary>
            <param name="text"></param>
            <param name="quotes"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Primitive.StringExtensions.SurroundWith(System.String,System.Char)">
            <summary>
            Adds the given quote char at the beginning and end of the string
            </summary>
            <param name="text"></param>
            <param name="quotes"></param>
            <returns></returns>
        </member>
        <member name="T:VL.Lib.Reactive.AsyncLoop`2">
            <summary>
            Runs an infinite loop in a background thread.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TOut">The output type.</typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.AsyncTask`1">
            <summary>
            Runs the given task once in a background thread.
            </summary>
            <typeparam name="TOut">The output type.</typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.DebugNode`1">
            <summary>
            Keeps track of the calls made internally in the obserable computation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.HoldLatest`1">
            <summary>
            Stores the latest notification and outputs it. Use S+H [Reactive] if you want to sample and hold all notifications between two calls
            </summary>
            <typeparam name="TIn"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.SampleAndHold`1">
            <summary>
            Sample and hold all notifications between two calls. Use HoldLatest [Reactive] if you only need the newest notification
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.ObservableInputBase">
            <summary>
            Ungeneric base class managing the hot swap.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableInputBase.ReleaseResources">
            <summary>
            Releases the subscription. Called on dispose and finalize.
            Override in subclass to release more resources.
            </summary>
        </member>
        <member name="T:VL.Lib.Reactive.ObservableInputBase`1">
            <summary>
            Base class that manages one input observable and one subscription of it.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:VL.Lib.Reactive.ObservableInputBase`1.ManageObservable(System.IObservable{`0})">
            <summary>
            Subscribes to the observable if not already.
            If the input is null only the old subscription is disposed.
            </summary>
            <param name="observable">The potentially new observable.</param>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableInputBase`1.HandleLastException">
            <summary>
            Resets the last exception and throws it.
            Supposed to be used in "Update" to inform the VL mainloop of an exception that happened in the observable.
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableInputBase`1.OnNext(`0)">
            <summary>
            Called when a new event is observed. Override in subclass to handle the events.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableInputBase`1.OnError(System.Exception)">
            <summary>
            Called when the observable throws an exception
            </summary>
        </member>
        <member name="M:VL.Lib.Reactive.ObservableInputBase`1.OnCompleted">
            <summary>
            Called when the observable is completed
            </summary>
        </member>
        <member name="T:VL.Lib.Reactive.KeepAlive`1">
            <summary>
            Keeps a single subscription of the input observable so that it will be kept alive and passes the events on to the output. The observable on the output is always the same
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.ToObservable`1">
            <summary>
            Creates an observable and sends the input value as an event on it. The output observable is always the same and never completes
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.ToObservableSwitch`1">
            <summary>
            Routes the input observable to the output whenever 'Send' is true, the output observable is always the same and never completes.
            It also catches exceptions thrown by the input observable and throws them in its update operation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.ToObservableSequence`1">
            <summary>
            Creates an observable and sends each element in the input sequence as individual events on it. The output observable is always the same and never completes
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.ForEach`3">
            <summary>
            Executes for each input event and and can transform the event value into a different type.
            Use the 'Keep' version if you want to filter some events out.
            </summary>
            <typeparam name="TState"></typeparam>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.ForEachKeep`3">
            <summary>
            Executes for each input event and and can transform the event value into a different type.
            The second boolean output in the region decides whether to pass the current event on.
            </summary>
            <typeparam name="TState"></typeparam>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
        </member>
        <member name="T:VL.Lib.Reactive.Sampler`1">
            <summary>
            Samples all events that happen between the last update and the current update and outputs the event values as a spread. The output is an empty spread if no events have occured
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:VL.Lib.HardwareChangedEvents.HardwareAdded">
            <summary>
            Checks for device additions, buffers multiple events in 2 second windows. Can fire multiple times
            </summary>
        </member>
        <member name="P:VL.Lib.HardwareChangedEvents.HardwareRemoved">
            <summary>
            Checks for device removals, buffers multiple events in 2 second windows. Can fire multiple times
            </summary>
        </member>
        <member name="P:VL.Lib.HardwareChangedEvents.HardwareChanged">
            <summary>
            Checks for device additions and removals, buffers multiple events in 2 second windows. Can fire multiple times
            </summary>
        </member>
        <member name="T:VL.Lib.GUID_DEVCLASS">
            <summary>
             Defines GUIDs for device classes used in Plug &amp; Play.
            </summary>
        </member>
        <member name="M:VL.Lib.LinearEquationSolver.Solve(VL.Lib.Collections.Spread{VL.Lib.Collections.Spread{System.Single}},VL.Lib.Collections.Spread{System.Single},VL.Lib.Collections.Spread{System.Single}@,System.Boolean@)">
            <summary>
            Computes the solution of a linear equation system using Gauss elimination
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <param name="x"></param>
            <param name="success"></param>
        </member>
        <member name="M:VL.Lib.LinearEquationSolver.Solve(System.Single[0:,0:])">
            <summary>Computes the solution of a linear equation system.</summary>
            <param name="M">
            The system of linear equations as an augmented matrix[row, col] where (rows + 1 == cols).
            It will contain the solution in "row canonical form" if the function returns "true".
            </param>
            <returns>Returns whether the matrix has a unique solution or not.</returns>
        </member>
        <member name="T:VL.Lib.Threading.TaskExtensions">
            <summary>
            Extension methods for tasks.
            </summary>
        </member>
        <member name="M:VL.Lib.Threading.TaskExtensions.CancelAndDispose(System.Threading.Tasks.Task,System.Threading.CancellationTokenSource,System.Int32)">
            <summary>
            Cancels the tasks, waits for it to finish and disposes both the cancellation token source as well as the task.
            </summary>
            <param name="task">The task to cancel.</param>
            <param name="cancellation">The cancellation token source whose token is used by the task.</param>
            <param name="timeout">The time in milli seconds to wait for termination of the task.</param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.JoinXDocument(System.Xml.Linq.XElement,System.Xml.Linq.XDeclaration,System.Xml.Linq.XDocumentType)">
            <summary>
            Creates an XDocument
            </summary>
            <param name="root"></param>
            <param name="declaration"></param>
            <param name="documentType"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.SplitXDocument(System.Xml.Linq.XDocument,System.Xml.Linq.XElement@,System.Xml.Linq.XDeclaration@,System.Xml.Linq.XDocumentType@)">
            <summary>
            Splits an XDocument into its components
            </summary>
            <param name="input"></param>
            <param name="root"></param>
            <param name="declaration"></param>
            <param name="documentType"></param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.JoinXDeclaration(System.String,System.String,System.String)">
            <summary>
            Creates an XDeclaration
            </summary>
            <param name="version"></param>
            <param name="encoding"></param>
            <param name="standalone"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.SplitXDeclaration(System.Xml.Linq.XDeclaration,System.String@,System.String@,System.String@)">
            <summary>
            Splits an XDeclaration into its components
            </summary>
            <param name="input"></param>
            <param name="version"></param>
            <param name="encoding"></param>
            <param name="standalone"></param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.JoinXDocumentType(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an XDocumentType
            </summary>
            <param name="name"></param>
            <param name="publicId"></param>
            <param name="systemId"></param>
            <param name="internalSubset"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.SplitXDocumentType(System.Xml.Linq.XDocumentType,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Splits an XDocumentType into its components
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <param name="publicId"></param>
            <param name="systemId"></param>
            <param name="internalSubset"></param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.JoinXElement(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute},System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Creates an XElement
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.SplitXElement(System.Xml.Linq.XElement,System.String@,System.String@,VL.Lib.Collections.Spread{System.Xml.Linq.XElement}@,VL.Lib.Collections.Spread{System.Xml.Linq.XAttribute}@)">
            <summary>
            Splits an XElement into its components
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="children"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.JoinXAttribute(System.String,System.String)">
            <summary>
            Creates an XAttribute
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.SplitXAttribute(System.Xml.Linq.XAttribute,System.String@,System.String@)">
            <summary>
            Splits an XAttribute into its components
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.XElementsByName(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Returns a spread of XElements with the given name
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <param name="allDescendants"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.XAttributeByName(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns the XAttribute with the given name
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.ValidateXDocumentSchema(System.Xml.Linq.XNode,VL.Lib.IO.Path,System.Boolean@,System.String@)">
            <summary>
            Validates an XDocument or XElement against an XML Schema Definition and returns whether it is valid or not
            </summary>
            <param name="node"></param>
            <param name="validationFile"></param>
            <param name="isValid"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes an XDocument from a JSON string
            </summary>
            <param name="json"></param>
            <param name="deserializeRootElementName"></param>
            <param name="writeArrayAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:VL.Lib.Xml.XmlNodes.SerializeXNode(System.Xml.Linq.XNode,System.Boolean,System.Boolean)">
            <summary>
            Serializes an XDocument or XElement to a JSON string
            </summary>
            <param name="input"></param>
            <param name="indent"></param>
            <param name="omitRootObject"></param>
            <returns></returns>
        </member>
    </members>
</doc>
